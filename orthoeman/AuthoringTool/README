The problem:
------------

Hard requirements:
------------------

1) Central updating of jars. That means one location where to store all jars
and to not update the same jar multiple times

2) Jar filename version robustness. That means updated jars with filename
change due to version update shouldn't wreak havoc to all projects

3) Stand alone building capability. That means we can build our software
without an IDE


Soft requirements: (they are soft because we can't satisfy them with the current scheme :-)
------------------

4) Single point of libraries definition. That means no need to upgrade
classpath in multiple places

5) IDE independence


Description:
------------

I believe with the introduction of ivy that automatically downloads newest
jars and the way build.xml are autogenerated by our scripts we are able to
meet all the above requirements

We are using a construct of eclipse (so much for req. #5) called user
libraries. These are collection of jars that can be exported and or
imported by eclipse. The jars are living inside the lib/ directory of
the current eclipse project. The main user-libraries definition file
is lib.userlibraries.

The lib.userlibraries and build-lib.xml (ant library definitions) are
automatically created by specifying
	$>ant -f lib.xml setup

The single definition of jar files is scripts/lib.ini.
After you have changed this file follow the steps below in the section named
"Updating 3rd party libraries"

-------------------------------------------------------
------------ Updating 3rd party libraries -------------
-------------------------------------------------------

Clean previously downloaded jars
1) ant -f lib.xml clean

2) One ant  to create the config files and to bring the new staff
 ant -f lib.xml upgrade

or 1) + 2)
 ant -Dauto-value-annotation.version=1.7.2 -f lib.xml clean upgrade

3) Evaluate the outcome (svn st) and perform several subversion operations of
delete, add and possibly revert
 svn st

4) Finally update the lib.userlibraries and build-lib.xml
 ant setup

5) From eclipse you have to
	1) refresh current project so ecliple be informed about jar file changes
	2) import lib.userlibraries

6) These will generate new .classpath and from there you need to update all
build.xml files (This step is not necessary if you haven't changed the classpath of projects).
Use eclipse facilities to regenerate build.xml

We have to do the above step in any .classpath project change (e.g. added
project dependancy)

This build files are now capable to build all projects in stand alone mode
without eclipse.

7) probably you need something like that to accept all changes blindly
 svn remove `svn st | grep '^\!' | awk '{print $2;}'`
 svn add `svn st | grep '^\?' | awk '{print $2;}'`

8) Finally commit all changes to the repository
 svn commit -m "update to the latest 3rd party jars"

Requirements revisit:
---------------------

This scheme fullfills requirements 1-4.

We fail #5 but not so bad as previously.  The real source files of the whole
procedure is .classpath and scripts/lib.ini.  The .classpath is eclipse's
centric.  The whole procedure can be augmented if we teach the script
scripts/update-build-xml.sh to create build.xml from other IDE's project
description files.

           Vassilis

PS:
Manually created file
---------------------
empty-ivybuild.xml	required for ivy configuration creation
build-common.xml	ant build file for all the other projects
scripts	
README
TODO

Automatically created files
---------------------------
build.xml		created by eclipse
build-lib.xml		created by ant setup
lib.userlibraries	created by ant setup
ivybuild.xml		create by ant
ivysettings.xml		create by ant
ivy.xml			create by ant
